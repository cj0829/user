<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd"
	default-lazy-init="true">
	<!-- 使用annotation 自动注册bean,并保证@Required,@Autowired的属性被注入 将Controller的注解排除掉 -->
	<context:component-scan base-package="org.csr">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	<context:component-scan base-package="com.tmai">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	
	
	<!-- 引用权限配置文件文件 -->
	<import resource="applicationContext-security.xml" /> 
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:configure.properties</value>
			</list>
		</property>
	</bean>

	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<!-- 基本属性 url、user、password -->
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="100" />
		<property name="minIdle" value="50" />
		<property name="maxActive" value="200" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT COUNT(*) FROM DUAL" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
		<!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
		<property name="filters" value="stat" />

	</bean>

	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="persistenceUnitName" value="tmai"/>
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="database" value="${jpa.database}" />
				<property name="showSql" value="${jpa.showSql}" />
			</bean>
		</property>
	</bean>

	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- JPA 基础 dao class -->
	<bean id="adapterJpaDao" class="org.csr.core.persistence.query.jpa.AdapterJpaDao" />

	<!-- 系统参数Dao class -->
	<bean id="parameterDao" class="com.pmt.core.business.dao.jpa.ParameterDaoImpl" />

	<!-- 系统参数服务class -->
	<bean id="parameterService" class="com.pmt.core.business.service.ParameterServiceImpl">
		<property name="parameterDao" ref="parameterDao"></property>
	</bean>

	<!-- 域参数Dao class -->
	<bean id="organizationParameterDao" class="com.pmt.core.business.dao.jpa.OrganizationParameterDaoImpl" />

	<!-- 域参数服务class -->
	<bean id="organizationParameterService" class="com.pmt.core.business.service.OrganizationParameterServiceImpl"
	init-method="iniCache">
		<property name="organizationParameterDao" ref="organizationParameterDao"></property>
		<property name="parameterService" ref="parameterService"></property>
	</bean>

	<!-- 域数服务 注册， -->
	<bean id="organizationService" class="org.csr.common.user.service.impl.OrganizationServiceImpl">
		<!-- 注册接口 -->
		<property name="initDataOrganizations">
			<list>
			</list>
		</property>
	</bean>
	<!-- 机构服务 注册， -->
	<bean id="agenciesService" class="org.csr.common.user.service.impl.AgenciesServiceImpl">
		<!-- 注册接口 -->
		<property name="deleteAgencies">
			<list>
				<ref bean="userImportFileService" />
			</list>
		</property>
	</bean>
	
	<!-- 注册form表达，接口服务class -->
	<bean id="formSerivceFactory" class="org.csr.common.flow.support.FormSerivceFactory">
		<property name="formSerivceMap">
			<map>
				<entry key="org.csr.common.user.domain.User" value="userApprovalService" />
			</map>
		</property>
	</bean>
	<!--userService -->
	<!--userFacade -->
	<bean id="userFacade" class="org.csr.common.user.facade.impl.UserFacadeImpl">
		<!-- 注册用户删除接口 -->
		<property name="userinitdatas">
			<list>
				<ref bean="userMoreFacade" />
				<ref bean="userPasswordProblemFacade" />
				<ref bean="userRoleFacade" />
				<ref bean="userSafeResourceCollectionFacade" />
				<ref bean="userSpecialFunctionPointFacade" />
				<ref bean="taskNodeApprovalChainFacade" />
			</list>
		</property>
	</bean>
	
	<!-- Jpa 事务配置 -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>
	<!-- 通知配置 -->
	<tx:advice id="wdTxAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="update" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="task*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="release*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="cancel*" propagation="REQUIRED" />
			<tx:method name="share*" propagation="REQUIRED" />
			<tx:method name="start*" propagation="REQUIRED" />
			<tx:method name="handle*" propagation="REQUIRED" />
			<tx:method name="end*" propagation="REQUIRED" />
			<tx:method name="process*" propagation="REQUIRED" />
			<tx:method name="pre*" read-only="true" />
			<tx:method name="get*" read-only="true" />
			<tx:method name="query*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="count*" read-only="true" />
			<tx:method name="wrap*" read-only="true" />
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>
	<!-- 采用aop 的方式作为代理方式。 -->
	<aop:config>
		<aop:pointcut id="transactionMethod" expression="execution(public * org..service..*.*(..)) or execution(public * org..facade..*.*(..)) or execution(public * com..service..*.*(..)) or execution(public * com..facade..*.*(..))" />
		<aop:advisor pointcut-ref="transactionMethod" advice-ref="wdTxAdvice" />
	</aop:config>
	
	<!--消息日志队列 -->
	<bean id="queueService" class="org.csr.core.queue.QueueService"
		scope="singleton">
		<property name="interval" value="600"></property>
		<property name="size" value="1"></property>
		<property name="mapProcessingService">
			<map>
				<!-- 操作消息日志队列 -->
				<entry key="org.csr.core.persistence.message.OperLogMessage" value="operationLogService" />
				<!-- 浏览消息日志队列 -->
				<entry key="org.csr.core.security.message.BrowseLogMessage" value="operationLogService" />
				<!-- 积分消息日志队列 -->
				<entry key="org.csr.core.persistence.message.PointsLogMessage" value="userPointsLogService" />
				<!-- 退出系统日志队列 -->
				<entry key="org.csr.core.security.message.LogoutMessage" value="loginLogService" />
				<!-- 文件远程消息服务 -->
				<entry key="org.csr.common.storage.message.LocalDatastreamMsg" value="localDatastreamService" />
			</map>
		</property>
	</bean>
</beans>